//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré à partir d'un modèle.
//
//     Des modifications manuelles apportées à ce fichier peuvent conduire à un comportement inattendu de votre application.
//     Les modifications manuelles apportées à ce fichier sont remplacées si le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PimpYourCharacter.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    
    public partial class pimp_your_characterEntities : DbContext
    {
        public pimp_your_characterEntities()
            : base("name=pimp_your_characterEntities")
        {
        }

        /*protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }*/
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            modelBuilder.Entity<personnage>()
                .HasMany<accessoire>(p => p.accessoire)
                .WithMany(a => a.personnage)
                .Map(ap =>
                    {
                        ap.MapLeftKey("id_personnage");
                        ap.MapRightKey("id_accessoire");
                        ap.ToTable("personnage_accessoire");
                    });

            modelBuilder.Entity<personnage>()
                .HasMany<arme>(p => p.arme)
                .WithMany(a => a.personnage)
                .Map(ap =>
                {
                    ap.MapLeftKey("id_personnage");
                    ap.MapRightKey("id_arme");
                    ap.ToTable("personnage_arme");
                });

            modelBuilder.Entity<personnage>()
                .HasMany<bouclier>(p => p.bouclier)
                .WithMany(a => a.personnage)
                .Map(ap =>
                {
                    ap.MapLeftKey("id_personnage");
                    ap.MapRightKey("id_bouclier");
                    ap.ToTable("personnage_bouclier");
                });

            modelBuilder.Entity<personnage>()
                .HasMany<vmain>(p => p.vmain)
                .WithMany(a => a.personnage)
                .Map(ap =>
                {
                    ap.MapLeftKey("id_personnage");
                    ap.MapRightKey("id_vmain");
                    ap.ToTable("personnage_vmain");
                });

            modelBuilder.Entity<personnage>()
                .HasMany<vpied>(p => p.vpied)
                .WithMany(a => a.personnage)
                .Map(ap =>
                {
                    ap.MapLeftKey("id_personnage");
                    ap.MapRightKey("id_vpied");
                    ap.ToTable("personnage_vpied");
                });

            modelBuilder.Entity<personnage>()
                .HasMany<vtete>(p => p.vtete)
                .WithMany(a => a.personnage)
                .Map(ap =>
                {
                    ap.MapLeftKey("id_personnage");
                    ap.MapRightKey("id_vtete");
                    ap.ToTable("personnage_vtete");
                });
        }

        public virtual DbSet<accessoire> accessoire { get; set; }
        public virtual DbSet<arme> arme { get; set; }
        public virtual DbSet<bouche> bouche { get; set; }
        public virtual DbSet<bouclier> bouclier { get; set; }
        public virtual DbSet<bras> bras { get; set; }
        public virtual DbSet<buste> buste { get; set; }
        public virtual DbSet<categorie_accessoire> categorie_accessoire { get; set; }
        public virtual DbSet<categorie_arme> categorie_arme { get; set; }
        public virtual DbSet<corps> corps { get; set; }
        public virtual DbSet<couleur> couleur { get; set; }
        public virtual DbSet<ethnie> ethnie { get; set; }
        public virtual DbSet<genre> genre { get; set; }
        public virtual DbSet<jambe> jambe { get; set; }
        public virtual DbSet<nez> nez { get; set; }
        public virtual DbSet<personnage> personnage { get; set; }
        public virtual DbSet<personnage_tatouage_position> personnage_tatouage_position { get; set; }
        public virtual DbSet<position> position { get; set; }
        public virtual DbSet<tatouage> tatouage { get; set; }
        public virtual DbSet<tete> tete { get; set; }
        public virtual DbSet<texture> texture { get; set; }
        public virtual DbSet<vbas> vbas { get; set; }
        public virtual DbSet<vhaut> vhaut { get; set; }
        public virtual DbSet<vmain> vmain { get; set; }
        public virtual DbSet<vpied> vpied { get; set; }
        public virtual DbSet<vtete> vtete { get; set; }
        public virtual DbSet<yeux> yeux { get; set; }
    }
}
